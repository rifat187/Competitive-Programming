/*
    1. constructor
    2. init
    3. build
    4. take careod INF9 and INF18
*/
#define INF9         2147483647
#define INF18        9223372036854775806
template <typename T> struct SegmentTree
{
    vector <T> seg;
    vector <T> lazy;
    vector <T> ar;
    int type, up;
    SegmentTree()
    {
        type = 0;
        up = 0;
    }
    SegmentTree(int tp, int u)
    {
        type = tp;
        up = u;
    }
    void Init(int N)
    {
        seg.assign(N << 2, 0);
        lazy.assign(N << 2, 0);
    }
    void Init(vector <T> &s)
    {
        Init(s.size() + 1);
        ar = s;
    }
    void PushDown(int cur, int left, int right)
    {
        if(type==0)
        {
            if (up == 1) seg[cur] += (right - left + 1) * lazy[cur];
            else seg[cur] = (right - left + 1) * lazy[cur];
        }
        else if(type==1)
        {
            if(up == 1) seg[cur] +=lazy[cur];
            else seg[cur]=lazy[cur];
        }
        else
        {
            if(up == 1) seg[cur] +=lazy[cur];
            else seg[cur]=lazy[cur];
        }

        if (left != right)
        {
            if (up == 1)
            {
                lazy[cur << 1] += lazy[cur];
                lazy[cur << 1 | 1] += lazy[cur];
            }
            else
            {
                lazy[cur << 1] = lazy[cur];
                lazy[cur << 1 | 1] = lazy[cur];
            }
        }
        lazy[cur] = 0;
    }
    T Merge(T x, T y)
    {
        if (type == 0) return x + y;
        if (type == 1) return max(x, y);
        if (type == 2) return min(x, y);
    }
    void Build(int cur, int left, int right)
    {
        lazy[cur] = 0;
        if (left == right)
        {
            seg[cur] = ar[left];
            return;
        }
        int mid = (left + right) >> 1;
        Build(cur << 1, left, mid);
        Build(cur << 1 | 1, mid + 1, right);
        seg[cur] = Merge(seg[cur << 1], seg[cur << 1 | 1]);
    }
    void Update(int cur, int left, int right, int pos, T val)
    {
        Update(cur, left, right, pos, pos, val);
    }

    void Update(int cur, int left, int right, int l, int r, T val)
    {
        if (lazy[cur] != 0) PushDown(cur, left, right);
        if (l > right || r < left) return;
        if (left >= l && right <= r)
        {
            if (up == 0) lazy[cur] = val;
            else lazy[cur] += val;
            PushDown(cur, left, right);
            return ;
        }
        int mid = (left + right) >> 1;
        Update(cur << 1, left, mid, l, r, val);
        Update(cur << 1 | 1, mid + 1, right, l, r, val);
        seg[cur] = Merge(seg[cur << 1], seg[cur << 1 | 1]);
    }
    T Query(int cur, int left, int right, int l, int r)
    {
        if (l > right || r < left)
        {
            if (type == 0) return 0;
            if (type == 1) return -INF18;
            if (type == 2) return INF18;
        }
        if (lazy[cur] != 0) PushDown(cur, left, right);
        if (left >= l && right <= r) return seg[cur];
        int mid = (left + right) >> 1;
        T p1 = Query(cur << 1, left, mid, l, r);
        T p2 = Query(cur << 1 | 1, mid + 1, right, l, r);
        return Merge(p1, p2);
    }
};
//for sum = 0, max = 1, min = 2, for assignment update send 0 or 1 for increment.
SegmentTree <ll> tree1(2, 1);
