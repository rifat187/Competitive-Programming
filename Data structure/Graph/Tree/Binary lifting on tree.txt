#include<bits/stdc++.h>
using namespace std;
typedef		 long long int    ll;
typedef		 long double   ld;
typedef		vector<ll>      vll;
#define     fi              first
#define     print(v)        for(ll i:v) cout<<i<<ss
#define     se              second
#define		pb              push_back
#define		nn              "\n"
#define		all(p)          p.begin(),p.end()
#define		zz(v)           (ll)v.size()
#define 	S(a)            scanf("%lld",&a)
#define 	SS(a,b)         scanf("%lld %lld",&a,&b)
#define 	SSS(a,b,c)      scanf("%lld %lld %lld",&a,&b,&c)
#define		ss              ' '
#define     pii             pair<ll,ll>
#define		gcd(a,b)        __gcd(a,b)
#define		lcm(a,b)        (a*b)/gcd(a,b)
const double eps = 1e-8;
vll v[100];
ll up[100][20];
ll l;

void dfs(ll u,ll p)
{
    up[u][0]=p;
    for(ll i=1; i<=l; i++)
    {
        up[u][i]=up[up[u][i-1]][i-1];
    }

    for(ll child : v[u])
    {
        if(child==p)
            continue;
        dfs(child,u);
    }

}
ll s1,s2;
ll pw(ll k)
{
    s1=1;
    s2=0;
    while(s1*2<=k)
    {
        s1*=2;
        s2++;
    }
}


int main()
{
//
//    ios::sync_with_stdio(0);
//    cin.tie(0);
    ll n;
    cin>>n;
    l = ceil(log2(n));
    for(ll i=1; i<n; i++)
    {
        ll a,b;
        cin>>a>>b;
        v[a].pb(b);
        v[b].pb(a);
    }

    dfs(1,1);
//
//    for(ll i=1; i<=n; i++)
//    {
//        for(ll j=0; j<3; j++)
//        {
//            cout<<up[i][j]<<ss;
//        }
//        cout<<nn;
//    }

    ll q;
    cin>>q;
    while(q--)
    {
        ll node,lift;
        cin>>node>>lift;
        while(lift)
        {
            pw(lift);
            node=up[node][s2];
            lift-=s1;
        }
        cout<<node<<nn;

    }




}


/* Final check before submit :

1. array size or integer overflow,like uninitialised 0 index.

2. Think twice,code once.check all possible counter test case.

3. Be careful about corner case! n=1?k=1? something about 0?

4. avoid stupid mistake!complexity(t/m)?precision error?submit same code twice?

5. if got WA than remember that you are missing something common.
   *** Be confident!!! who knows? may be your one step back to AC ***
4. minus mod ans=(ans-k+mod)%mod;

*/




