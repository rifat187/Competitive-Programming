#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef long double ld;
typedef vector<ll> vll;
#define fi first
#define print(v) for(ll i:v) cout<<i<<ss
#define se second
#define pb push_back
#define nn "\n"
#define all(p) p.begin(),p.end()
#define zz(v) (ll)v.size()
#define S(a) scanf("%lld",&a)
#define SS(a,b) scanf("%lld %lld",&a,&b)
#define SSS(a,b,c) scanf("%lld %lld %lld",&a,&b,&c)
#define ss ' '
#define pii pair<ll,ll>
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (a*b)/gcd(a,b)
const double eps = 1e-8;
const ll N=10010;
ll edges[N][3];
ll n,m;
void BellmanFord(ll s)
{
    ll dis[n+5];
    for(ll i=1; i<=n; i++)
        dis[i]=1e18;
    dis[s]=0;
    for(ll i=0; i<n-1; i++)
    {
        for(ll j=0; j<m; j++)
        {
            ll x=edges[j][0];
            ll y=edges[j][1];
            ll w=edges[j][2];
            if(dis[x]+w<dis[y])
            {
                dis[y]=dis[x]+w;
            }
        }
    }
    for(ll j=0; j<m; j++)
    {
        ll x=edges[j][0];
        ll y=edges[j][1];
        ll w=edges[j][2];
        if(dis[x]+w<dis[y])
        {
            cout<<"graph contain negative cycle"<<"\n";
            return;
        }
    }
    for(ll i=1; i<=n; i++)
        cout<<dis[i]<<ss;
}
int main()
{
    cin>>n>>m;
    for(ll i=0; i<m; i++)
    {
        ll a,b,w;
        cin>>a>>b>>w;
        edges[i][0]=a;
        edges[i][1]=b;
        edges[i][2]=w;
    }
    BellmanFord(1);
}
/*
test case :
3 3
1 2 1
2 3 -7
1 3 10
*/
// graph contain negative cycle test case
/*
4 4
1 2 1
2 3 -1
3 4 -1
4 1 -1
*/
