#include<bits/stdc++.h>
using namespace std;
typedef      long long int    ll;
typedef      long double   ld;
typedef     vector<ll>      vll;
#define     fi              first
#define     print(v)        for(ll i:v) cout<<i<<ss
#define     se              second
#define     pb              push_back
#define     nn              "\n"
#define     all(p)          p.begin(),p.end()
#define     zz(v)           (ll)v.size()
#define     S(a)            scanf("%lld",&a)
#define     SS(a,b)         scanf("%lld %lld",&a,&b)
#define     SSS(a,b,c)      scanf("%lld %lld %lld",&a,&b,&c)
#define     ss              ' '
#define     pii             pair<ll,ll>
#define     gcd(a,b)        __gcd(a,b)
#define     lcm(a,b)        (a*b)/gcd(a,b)
const double eps = 1e-8;
ll n,m,k;
const ll N=1005;
const ll inf=1e17;
vector<pii>v[N];
ll allpath[N][N];
// all pair shortest path

void dij(ll u)
{
    set<pii>st;
    allpath[u][u]=0;
    st.insert({0,u});

    while(!st.empty())
    {
        ll top=st.begin()->se;
        st.erase(st.begin());
        for(pii p:v[top])
        {
            if(allpath[u][p.fi]>allpath[u][top]+p.se)
            {
                allpath[u][p.fi]=allpath[u][top]+p.se;
                auto it = st.find({allpath[u][p.fi],p.fi});
                if(it!=st.end())
                    st.erase(it);
                st.insert({allpath[u][p.fi],p.fi});
            }

        }
    }


}


int main()
{

    for(ll i=0; i<N; i++)
    {
        for(ll j=0; j<N; j++)
        {
            allpath[i][j]=inf;
        }
    }

    cin>>n>>m;
    for(ll i=0; i<m; i++)
    {
        ll a,b,w;
        cin>>a>>b>>w;
        v[a].pb({b,w});
        v[b].pb({a,w});
    }


    for(ll i=1; i<=n; i++)
    {
        dij(i);
    }

    for(ll i=1; i<=n; i++)
    {
        cout<<"from "<<i<<": ";
        for(ll j=1; j<=n; j++)
        {
            cout<<allpath[i][j]<<ss;
        }

        cout<<nn;
    }













}

/* Final check before submit :

1. array size or integer overflow,like uninitialised 0 index.

2. Think twice,code once.check all possible counter test case.

3. Be careful about corner case! n=1?k=1? something about 0?

4. avoid stupid mistake!complexity(t/m)?precision error?submit same code twice?

5. if got WA than remember that you are missing something common.
   *** Be confident!!! who knows? may be your one step back to AC ***
4. minus mod ans=(ans-k+mod)%mod;

*/


