#include<bits/stdc++.h>
using namespace std;
typedef		 long long int    ll;
typedef		 long double   ld;
typedef		vector<ll>      vll;
#define     fi              first
#define     print(v)        for(ll i:v) cout<<i<<ss
#define     se              second
#define		pb              push_back
#define		nn              "\n"
#define		all(p)          p.begin(),p.end()
#define		zz(v)           (ll)v.size()
#define 	S(a)            scanf("%lld",&a)
#define 	SS(a,b)         scanf("%lld %lld",&a,&b)
#define 	SSS(a,b,c)      scanf("%lld %lld %lld",&a,&b,&c)
#define		ss              ' '
#define     pii             pair<ll,ll>
#define		gcd(a,b)        __gcd(a,b)
#define		lcm(a,b)        (a*b)/gcd(a,b)
const double eps = 1e-8;

const ll maxn=500;
const ll inf=0;

ll ch(ll x,ll y)
{
    // if the tree is min tree than inf must be inf=1e18
    // else inf = 0;
    return x+y;
}

ll ar[maxn];
ll n;
pii tree[4*maxn];

ll make_tree(ll node,ll l,ll r)
{
    if(l==r)
    {
        return tree[node].fi=ar[l];
    }

    tree[node].fi=ch(make_tree(node*2,l,(l+r)/2),make_tree(node*2+1,(l+r)/2+1,r));

}

// update range a-b

void update(ll a,ll b,ll l,ll r,ll node,ll value)
{

    // out of the range
    if(a>r||b<l)
        return;

    if(l>=a&&r<=b)
    {
        // totally fall under desired range
        tree[node].fi+=(r-l+1)*value;
        tree[node].se+=value;
        return;
    }

    // check for partial

    ll m=(l+r)/2;
    update(a,b,l,m,node*2,value);
    update(a,b,m+1,r,node*2+1,value);

    tree[node].fi=ch(tree[node*2].fi,tree[node*2+1].fi)+(r-l+1)*tree[node].se;


}

ll query(ll a,ll b,ll l,ll r,ll node,ll carry)
{
    // out of the range
    if(a>r||b<l)
        return inf;

    if(l>=a&&r<=b)
    {
        // totally fall under desired range
        return tree[node].fi+(r-l+1)*carry;

    }

    // check for partial

    ll m=(l+r)/2;
    return ch(query(a,b,l,m,node*2,carry+tree[node].se),query(a,b,m+1,r,node*2+1,carry+tree[node].se));

}







int main()
{


    // make_tree(1,0,n-1);
    //query(l,r,0,n-1,1,0)<<nn;
    // update(l,r,0,n-1,1,m);







}


/* Final check before submit :

1. array size or integer overflow,like uninitialised 0 index.

2. Think twice,code once.check all possible counter test case.

3. Be careful about corner case! n=1?k=1? something about 0?

4. avoid stupid mistake!complexity(t/m)?precision error?submit same code twice?

5. if got WA than remember that you are missing something common.
   *** Be confident!!! who knows? may be your one step back to AC ***
4. minus mod ans=(ans-k+mod)%mod;

*/




