#include<bits/stdc++.h>
using namespace std;
typedef		 long long int     ll;
typedef		vector<ll>      vll;
#define     fi              first
#define     se              second
#define		pb              push_back
#define		nn              "\n"
#define		all(p)          p.begin(),p.end()
#define		zz(v)           (ll)v.size()
#define 	S(a)            scanf("%lld",&a)
#define 	SS(a,b)         scanf("%lld %lld",&a,&b)
#define 	SSS(a,b,c)      scanf("%lld %lld %lld",&a,&b,&c)
#define		ss              ' '
#define     pii             pair<ll,ll>
#define		gcd(a,b)        __gcd(a,b)
#define		lcm(a,b)        (a*b)/gcd(a,b)
const double eps = 1e-8;


ll ar[10010];
void mg(ll l, ll m,ll r)
{

    ll n1=m-l+1;
    ll n2=r-m;
    ll L[n1],R[n2];
    for(ll i=0; i<n1; i++)
        L[i]=ar[l+i];
    for(ll i=0; i<n2; i++)
        R[i]=ar[m+1+i];

    ll i=0;
    ll j=0;
    ll k=l;
    // cout<<"1";
    while(i<n1&&j<n2)
    {
        if(L[i]<=R[j])
        {
            ar[k++]=L[i++];
        }
        else
        {
            ar[k++]=R[j++];
        }
    }
    //  cout<<"2";
    while(i<n1)
        ar[k++]=L[i++];
    while(j<n2)
        ar[k++]=R[j++];
}

void margesort(ll l,ll r)
{
    if (l<r)
    {
        ll m=l+(r-l)/2;
        margesort(l,m);
        margesort(m+1,r);

        mg(l,m,r);

    }
}

int main()
{
    ll n;
    ll l,r,m;
    cin>>n;

    for(ll i=0; i<n; i++)
    {
        cin>>ar[i];
    }
    l=0,r=n-1,m=l+(r-l)/2;
    margesort(l,r);

    for(ll i=0; i<n; i++)
    {
        cout<<ar[i]<<ss;
    }
    cout<<nn;






}



/* Final check before submit :

1. array size or integer overflow.

2. Think twice,code once.check all possible counter test case.

3. Be careful about corner case! n=1?k=1? something about 0?

4. avoid stupid mistake!complexity(t/m)?precision error?submit same code twice?

5. if got WA than remember that you are missing something common.
   *** Be confident!!! who knows? may be your one step back to AC ***

*/


