// same as p-01 
// given a 2d grind find the largest possible rectangle 
/*
5 7
0 1 1 0 1 1 0
0 0 0 0 0 1 0
1 0 0 0 0 0 1
0 1 0 0 0 0 1
1 1 0 0 0 1 0

*/


/*    ***Bismillahir Rahmanir Rahim***   */
#include<bits/stdc++.h>
using namespace std;
typedef       long long int   ll;
typedef      long double   ld;
typedef     vector<ll>      vll;
#define     fi              first
#define     print(v)        for(ll i:v) cout<<i<<ss
#define     se              second
#define     pb              push_back
#define     nn              "\n"
#define     all(p)          p.begin(),p.end()
#define     zz(v)           (ll)v.size()
#define     S(a)            scanf("%lld",&a)
#define     SS(a,b)         scanf("%lld %lld",&a,&b)
#define     SSS(a,b,c)      scanf("%lld %lld %lld",&a,&b,&c)
#define     ss              ' '
#define     pii             pair<ll,ll>
#define     gcd(a,b)        __gcd(a,b)
#define     lcm(a,b)        (a*b)/gcd(a,b)
const double eps = 1e-7;



int main()
{

    ll x,y;
    cin>>x>>y;
    ll mat[x+10][y+10];
    for(ll i=1; i<=x; i++)
    {
        for(ll j=1; j<=y; j++)
        {
            cin>>mat[i][j];
        }
    }


    ll n=y;

    ll a[n+10];
    a[0]=-1;
    for(ll i=1; i<=y; i++)
    {
        if(mat[x][i]==0)
        {
            ll cnt=1;
            ll j=x-1;
            while(j>=1&&mat[j][i]==0)
            {
                cnt++;
                j--;
            }
            a[i]=cnt;
        }
        else
            a[i]=0;
    }
    a[n+1]=-1;

//    for(ll i=1;i<=n;i++)
//    {
//
//
//        cout<<a[i]<<ss;
//    }
//    cout<<nn;

    ll left[n+10];
    ll right[n+10];

    stack<ll>st;

    st.push(0);
    for(ll i=1; i<=n; i++)
    {

        while(a[st.top()]>=a[i])
        {
            st.pop();
        }

        left[i]=i-st.top();


        st.push(i);

    }

    while(!st.empty())
        st.pop();
    st.push(n+1);

    for(ll i=n; i>=1; i--)
    {
        while(a[st.top()]>=a[i])
        {
            st.pop();
        }
        right[i]=st.top()-i;

        st.push(i);
    }

    ll ans=0;

    for(ll i=1; i<=n; i++)
    {
        ans=max(ans,(left[i]+right[i]-1)*a[i]);
    }

    cout<<ans<<nn;






}
