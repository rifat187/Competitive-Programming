/*

Given N,Calculate how many permutation of length N (ar[1],ar[2],...ar[n])
exist where each i (1<i<N) either following condition is satisfied :
1. ar[i]>ar[i+1] && ar[i] > ar[i-1]
2. ar[i]<ar[i+1] && ar[i] < ar[i-1]
(1<=N<=10000) 


*/

// naive 

/*    ***Bismillahir Rahmanir Rahim***   */
#include<bits/stdc++.h>
using namespace std;
typedef       long long int   ll;
typedef      long double   ld;
typedef     vector<ll>      vll;
#define     fi              first
#define     print(v)        for(ll i:v) cout<<i<<ss
#define     se              second
#define     pb              push_back
#define     nn              "\n"
#define     mem(dp)         memset(dp,-1,sizeof(dp))
#define     all(p)          p.begin(),p.end()
#define     zz(v)           (ll)v.size()
#define     S(a)            scanf("%lld",&a)
#define     SS(a,b)         scanf("%lld %lld",&a,&b)
#define     SSS(a,b,c)      scanf("%lld %lld %lld",&a,&b,&c)
#define     ss              ' '
#define     pii             pair<ll,ll>
#define     gcd(a,b)        __gcd(a,b)
#define     lcm(a,b)        (a*b)/gcd(a,b)
const double eps = 1e-7;

ll n;
ll dp[1005][2][1005];

int main()
{
    cin>>n;

    for(ll i=1; i<=n; i++)
    {
        dp[n+1][0][i]=1;
        dp[n+1][1][i]=1;
    }

    for(ll i=n; i>=1; i--)
    {
        for(ll t=0; t<=1; t++)
        {
            ll curmax=n-i+1;
            for(ll prev=1; prev<=n+1; prev++)
            {
                dp[i][t][prev]=0;

                if(t==0)
                {
                    for(ll k=1; k<prev; k++)
                    {
                        dp[i][t][prev]+=dp[i+1][1][k];
                    }


                }
                else
                {
                    for(ll k=prev; k<=curmax; k++)
                    {
                        dp[i][t][prev]+=dp[i+1][0][k];
                    }
                }


            }
        }
    }



    cout<<max(dp[1][0][n+1],dp[1][1][n+1]);









}

/*
test case :

4

4 1 3 2
1 4 2 3
2 3 1 4
1 3 2 4
3 2 4 1





*/


// better 


/*    ***Bismillahir Rahmanir Rahim***   */
#include<bits/stdc++.h>
using namespace std;
typedef       long long int   ll;
typedef      long double   ld;
typedef     vector<ll>      vll;
#define     fi              first
#define     print(v)        for(ll i:v) cout<<i<<ss
#define     se              second
#define     pb              push_back
#define     nn              "\n"
#define     mem(dp)         memset(dp,-1,sizeof(dp))
#define     all(p)          p.begin(),p.end()
#define     zz(v)           (ll)v.size()
#define     S(a)            scanf("%lld",&a)
#define     SS(a,b)         scanf("%lld %lld",&a,&b)
#define     SSS(a,b,c)      scanf("%lld %lld %lld",&a,&b,&c)
#define     ss              ' '
#define     pii             pair<ll,ll>
#define     gcd(a,b)        __gcd(a,b)
#define     lcm(a,b)        (a*b)/gcd(a,b)
const double eps = 1e-7;

ll n;
ll dp[1005][2][1005];
ll csum[1005][2][1005];

int main()
{
    cin>>n;

    for(ll i=1; i<=n; i++)
    {
        dp[n+1][0][i]=1;
        dp[n+1][1][i]=1;
        csum[n+1][0][i]=csum[n+1][0][i-1]+dp[n+1][0][i];
        csum[n+1][1][i]=csum[n+1][1][i-1]+dp[n+1][1][i];
    }

    for(ll i=n; i>=1; i--)
    {
        for(ll t=0; t<=1; t++)
        {
            ll curmax=n-i+1;
            for(ll prev=1; prev<=n+1; prev++)
            {
                dp[i][t][prev]=0;

                if(t==0)
                {
//
                    dp[i][t][prev]=csum[i+1][1][prev-1]-csum[i+1][1][0];


                }
                else
                {
                    dp[i][t][prev]=csum[i+1][0][curmax]-csum[i+1][0][prev-1];
                }

                csum[i][t][prev]=dp[i][t][prev]+csum[i][t][prev-1];




            }
        }
    }



    cout<<max(dp[1][0][n+1],dp[1][1][n+1]);









}

/*
test case :

4
ans=5;

4 1 3 2
1 4 2 3
2 3 1 4
1 3 2 4
3 2 4 1





*/

