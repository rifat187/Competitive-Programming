/*

You are given N dice and a value W . Each dice has faces numbered from 
1 to F. Calculate in how many ways you can set the top faces so that 
summation of all the to faces is equal to W.
(N,F<=1000andw<=15000)

*/
// naive :


#include<bits/stdc++.h>
using namespace std;
typedef       long long int   ll;
typedef      long double   ld;
typedef     vector<ll>      vll;
#define     fi              first
#define     print(v)        for(ll i:v) cout<<i<<ss
#define     se              second
#define     pb              push_back
#define     nn              "\n"
#define     mem(dp)         memset(dp,-1,sizeof(dp))
#define     all(p)          p.begin(),p.end()
#define     zz(v)           (ll)v.size()
#define     S(a)            scanf("%lld",&a)
#define     SS(a,b)         scanf("%lld %lld",&a,&b)
#define     SSS(a,b,c)      scanf("%lld %lld %lld",&a,&b,&c)
#define     ss              ' '
#define     pii             pair<ll,ll>
#define     gcd(a,b)        __gcd(a,b)
#define     lcm(a,b)        (a*b)/gcd(a,b)
const double eps = 1e-7;

ll n,f,w;
ll dp[1005][15005];
// state dp(index,sum)

int main()
{
    cin>>n>>w>>f;
    // dp initialization
    for(ll i=1; i<=w; i++)
        dp[n+1][i]=0;
    dp[n+1][0]=1;

    for(ll i=n; i>=1; i--)
    {
        for(ll j=1; j<=w; j++)
        {
            dp[i][j]=0;
            for(ll k=1; k<=f; k++)
            {
                if(j-k<0)
                    break;
                dp[i][j]+=dp[i+1][j-k];
            }
        }


    }

    cout<<dp[1][w]<<nn;

//    for(ll i=1;i<=n;i++)
//    {
//        for(ll j=1;j<=w;j++)
//        {
//            cout<<dp[i][j]<<ss;
//        }
//        cout<<nn;
//    }








}

/*
test case :

3 5 3
ans = 6


*/

// better or feasible 

/*    ***Bismillahir Rahmanir Rahim***   */
#include<bits/stdc++.h>
using namespace std;
typedef       long long int   ll;
typedef      long double   ld;
typedef     vector<ll>      vll;
#define     fi              first
#define     print(v)        for(ll i:v) cout<<i<<ss
#define     se              second
#define     pb              push_back
#define     nn              "\n"
#define     mem(dp)         memset(dp,-1,sizeof(dp))
#define     all(p)          p.begin(),p.end()
#define     zz(v)           (ll)v.size()
#define     S(a)            scanf("%lld",&a)
#define     SS(a,b)         scanf("%lld %lld",&a,&b)
#define     SSS(a,b,c)      scanf("%lld %lld %lld",&a,&b,&c)
#define     ss              ' '
#define     pii             pair<ll,ll>
#define     gcd(a,b)        __gcd(a,b)
#define     lcm(a,b)        (a*b)/gcd(a,b)
const double eps = 1e-7;

ll n,f,w;
ll dp[1005][15005];
ll csum[1005][15005];

// state dp(index,sum)
// optimization by csum 
int main()
{
    cin>>n>>w>>f;
    // dp initialization
    for(ll i=1; i<=w; i++)
        dp[n+1][i]=0,csum[n+1][i]=1;
    dp[n+1][0]=csum[n+1][0]=1;

    for(ll i=n; i>=1; i--)
    {
        dp[i][0]=csum[i][0]=0;
        
        for(ll j=1; j<=w; j++)
        {

            if(j-f-1>=0)
            {
                dp[i][j]=csum[i+1][j-1]-csum[i+1][j-f-1];
            }
            else
            {
                dp[i][j]=csum[i+1][j-1];
            }

            csum[i][j]=dp[i][j]+csum[i][j-1];
//            for(ll k=1; k<=f; k++)
//            {
//                if(j-k<0)
//                    break;
//                dp[i][j]+=dp[i+1][j-k];
//            }
        }


    }

    cout<<dp[1][w]<<nn;










}

/*
test case :

3 5 3



*/




