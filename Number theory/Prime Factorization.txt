#include<bits/stdc++.h>
using namespace std;
typedef      long long int    ll;
typedef      long double   ld;
typedef     vector<ll>      vll;
#define     fi              first
#define     print(v)        for(ll i:v) cout<<i<<ss
#define     se              second
#define     pb              push_back
#define     nn              "\n"
#define     all(p)          p.begin(),p.end()
#define     zz(v)           (ll)v.size()
#define     S(a)            scanf("%lld",&a)
#define     SS(a,b)         scanf("%lld %lld",&a,&b)
#define     SSS(a,b,c)      scanf("%lld %lld %lld",&a,&b,&c)
#define     ss              ' '
#define     pii             pair<ll,ll>
#define     gcd(a,b)        __gcd(a,b)
#define     lcm(a,b)        (a*b)/gcd(a,b)
const double eps = 1e-8;

const ll N=30;

ll mod=1e9+7;

ll spf[N];

void sieve()
{
    // marking smallest prime factor for every
    // number to itself

    for(ll i=1; i<N; i++)
        spf[i]=i;
    // marking SPF for all numbers divisible by i
    for(ll i=2; i*i<N; i++)
    {
        if(spf[i]==i)
        {
            for(ll j=i*i; j<N; j+=i)
            {
                if(spf[j]==j)
                    spf[j]=i;
            }
        }
    }


}

vll getfact(ll x)
{
    vll fact;

    while(x!=1)
    {
        fact.pb(spf[x]);
        x/=spf[x];
    }

    return fact;
}



int main()
{


    // for(ll i=1;i<=N;i++) cout<<spf[i]<<ss;

    //    ios::sync_with_stdio(0);
    //    cin.tie(0);
    sieve();
    ll n;
    cin>>n;
    vll v=getfact(n);
    for(ll j:v)
        cout<<j<<ss;


}

/* Final check before submit :

1. array size or integer overflow,like uninitialised 0 index.

2. Think twice,code once.check all possible counter test case.

3. Be careful about corner case! n=1?k=1? something about 0?

4. avoid stupid mistake!complexity(t/m)?precision error?submit same code twice?

5. if got WA than remember that you are missing something common.
   *** Be confident!!! who knows? may be your one step back to AC ***
4. minus mod ans=(ans-k+mod)%mod;

*/


